#!/bin/bash


. .site-env

log() {
 echo "********** $@ *************"
 read -p "Press [Enter] to cont..."
}

# log "REMOVE DOMAIN $DOMAIN"
# bench setup remove-domain --site $SITE $DOMAIN


drop_site() {
   log "DROP $SITE"
   bench drop-site $SITE --db-root-username $DB_USER --db-root-password $DB_PASS --force --no-backup
}

# bench set-ssl-certificate $SITE /etc/letsencrypt/live/$SITE/fullchain.pem
# bench set-ssl-key $SITE /etc/letsencrypt/live/$SITE/privkey.pem

new_site() {
    log "NEW SITE $SITE"
    bench new-site $SITE --db-type postgres --db-name $DB --db-user gisbb --db-root-username $DB_USER --db-root-password $DB_PASS --admin-password $ADM_PASS --db-port $DB_PORT --set-default

    # bench setup nginx
}

add_domain() {
    log "ADD DOMAIN $SITE"
    bench setup add-domain --ssl-certificate $SSL_CERT --ssl-certificate-key $SSL_KEY --site $SITE $DOMAIN
}

# drop_site
new_site 
add_domain
# drop_site

import random
import time
from rest_framework.decorators import api_view
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema

from service.tasks import process_query
from service.models import QueryHistory
from .serializers import QueryHistorySerializer, QueryHistoryCreateSerializer, QueryResultSerializer


@api_view(['GET'])
def history(request):
    """GET запрос, выдающий историю запросов"""
    cadastral_number = request.query_params.get('cadastral_number')
    if cadastral_number:
        queries = QueryHistory.objects.filter(cadastral_number=cadastral_number)
    else:
        queries = QueryHistory.objects.all()
    serializer = QueryHistorySerializer(queries, many=True)
    return Response(serializer.data)


@swagger_auto_schema(methods=['post'], request_body=QueryHistoryCreateSerializer)
@api_view(['POST'])
def query(request):
    """Получает запрос, проводит его валидацию и асинхронно обрабатывает."""
    serializer = QueryHistoryCreateSerializer(data=request.data)
    if serializer.is_valid():
        query_instance = serializer.save(response=None)
        process_query.delay(query_instance.id)
        return Response({'status': 'Запрос получен, ожидайте ответа сервера.', 'query_id': query_instance.id})
    return Response(serializer.errors, status=400)


@swagger_auto_schema(methods=['post'], request_body=QueryResultSerializer)
@api_view(['POST'])
def result(request):
    """Получает результат обработанного запроса и обновляет соответствующую запись."""
    serializer = QueryResultSerializer(data=request.data)
    if serializer.is_valid():
        query_id = serializer.validated_data['query_id']
        response = serializer.validated_data['response']

        try:
            query_instance = QueryHistory.objects.get(id=query_id)
            query_instance.response = response
            query_instance.save()
            return Response({'status': 'успешно'})
        except QueryHistory.DoesNotExist:
            return Response({'error': 'Запрос не найден'}, status=404)

    return Response(serializer.errors, status=400)



@api_view(['GET'])
def ping(request):
    """Простая вьюха для проверки статуса сервера."""
    return Response({"message": "Сервер запущен"})
########################################################
def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.validated_data
        cadastre_number = data['cadastre_number']
        latitude = data['latitude']
        longitude = data['longitude']

        # эмулируем отправку запроса на внешний сервер
        external_url = f'https://emulate.ru/api?cadastre_number={cadastre_number}&latitude={latitude}&longitude={longitude}'
        start_time = time.time()
        response = requests.get(external_url)
        end_time = time.time()

        # А тут проверяем, получен ли ответ в течение 60 секунд
        if end_time - start_time > 60:
            return Response({'error': 'Timeout error'}, status=status.HTTP_408_REQUEST_TIMEOUT)

        # проверка, действителен ли ответ
        if response.status_code != 200 or response.text not in ['true', 'false']:
            return Response({'error': 'Invalid response'}, status=status.HTTP_400_BAD_REQUEST)

        #  сохраняем запрос и ответ в базу данных
        result = response.text == 'true'
        request = Request.objects.create(cadastre_number=cadastre_number, latitude=latitude, longitude=longitude, result=result)
        headers = self.get_success_headers(serializer.data)
        return Response(RequestSerializer(request).data, status=status.HTTP_201_CREATED, headers=headers)

        https://www.django-rest-framework.org/api-guide/authentication/